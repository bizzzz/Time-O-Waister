/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace de.dailab.interprocess.shm {

using System;
using System.Runtime.InteropServices;

public class DataReader : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DataReader(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DataReader obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DataReader() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ShmDataPINVOKE.delete_DataReader(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public DataReader(string name, uint ringBufferSize, uint dataSize, uint alignment) : this(ShmDataPINVOKE.new_DataReader__SWIG_0(name, ringBufferSize, dataSize, alignment), true) {
    if (ShmDataPINVOKE.SWIGPendingException.Pending) throw ShmDataPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataReader(string name, uint ringBufferSize, uint dataSize) : this(ShmDataPINVOKE.new_DataReader__SWIG_1(name, ringBufferSize, dataSize), true) {
    if (ShmDataPINVOKE.SWIGPendingException.Pending) throw ShmDataPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataReader(string name) : this(ShmDataPINVOKE.new_DataReader__SWIG_2(name), true) {
    if (ShmDataPINVOKE.SWIGPendingException.Pending) throw ShmDataPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint readData(byte[] buffer, uint bufferSize, DataRequest.Type mod) {
    uint ret = ShmDataPINVOKE.DataReader_readData__SWIG_0(swigCPtr, buffer, bufferSize, (int)mod);
    return ret;
  }

  public uint readData(byte[] buffer, uint bufferSize) {
    uint ret = ShmDataPINVOKE.DataReader_readData__SWIG_1(swigCPtr, buffer, bufferSize);
    return ret;
  }

  

}

}
