/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace de.dailab.interprocess.shm {

using System;
using System.Runtime.InteropServices;

public class DataWriter : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DataWriter(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DataWriter obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DataWriter() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ShmDataPINVOKE.delete_DataWriter(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public DataWriter(string name, uint ringBufferSize, uint dataSize, uint alignment) : this(ShmDataPINVOKE.new_DataWriter__SWIG_0(name, ringBufferSize, dataSize, alignment), true) {
    if (ShmDataPINVOKE.SWIGPendingException.Pending) throw ShmDataPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataWriter(string name, uint ringBufferSize, uint dataSize) : this(ShmDataPINVOKE.new_DataWriter__SWIG_1(name, ringBufferSize, dataSize), true) {
    if (ShmDataPINVOKE.SWIGPendingException.Pending) throw ShmDataPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataWriter(string name) : this(ShmDataPINVOKE.new_DataWriter__SWIG_2(name), true) {
    if (ShmDataPINVOKE.SWIGPendingException.Pending) throw ShmDataPINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeData(byte[] data, uint dataSize) {
    ShmDataPINVOKE.DataWriter_writeData(swigCPtr, data, dataSize);
  }

  public void writeDataBegin() {
    ShmDataPINVOKE.DataWriter_writeDataBegin(swigCPtr);
  }

  public void writeDataContent(byte[] data, uint start, uint size) {
    ShmDataPINVOKE.DataWriter_writeDataContent(swigCPtr, data, start, size);
  }

  public void writeDataEnd() {
    ShmDataPINVOKE.DataWriter_writeDataEnd(swigCPtr);
  }

}

}
